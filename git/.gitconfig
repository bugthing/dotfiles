[user]
  email = ben.martin@smartpension.co.uk
  name = Benjamin Martin

[color]
  ui = auto

[core]
  autocrlf = input
  ignorecase = false
  whitespace = cr-at-eol
  editor = nvim
  pager = less -x4

[push]
	default = current

[pull]
  default = current
  rebase = false

[help]
  autocorrect = 1

[difftool "nvimdiff"]
  cmd = "nvim -d \"$LOCAL\" \"$REMOTE\""

[merge]
  tool = nvimdiff

[difftool]
  prompt = true

[diff]
  tool = nvimdiff

[commit]
  template = ~/.gitmessage.txt

[grep]
  lineNumber = true
  extendRegexp = true

[core]
  excludesfile = /home/benjamin/.gitignore_global

[rerere]
  enabled = true

[alias]
  co = checkout
  wt = worktree
  lo = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --
  praise = blame
  pushf = push --force-with-lease

  ## Working with branches ##

  # Get the current branch name (not so useful in itself, but used in
  # other aliases)
  branch-name = "!git rev-parse --abbrev-ref HEAD"

  # Push the current branch to the remote "origin", and set it to track
  # the upstream branch
  publish = "!git push -u origin $(git branch-name)"

  # Delete the remote version of the current branch
  unpublish = "!git push origin :$(git branch-name)"

  # Fire up difftool with all the changes that are on the current branch.
  code-review = difftool origin/main

  # Given a merge commit, find the span of commits that exist(ed) on that
  # branch. Not so useful in itself, but used by other aliases.
  merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

  # Find the commits that were introduced by a merge
  merge-log = "!git log `git merge-span .. $1`"

  # Show the changes that were introduced by a merge
  merge-diff = "!git diff `git merge-span ... $1`"

  # As above, but in your difftool
  merge-difftool = "!git difftool `git merge-span ... $1`"

  # Comparing the commits between branches
  missing = "!f() { git rev-list ..$1 --oneline | sed -e '1 iOnly in other:'; git rev-list $1.. --oneline | sed -e '1 iOnly in HEAD:'; }; f"

  # Set upstream to the current branch
  sus = "!git branch --set-upstream-to=origin/$(git branch-name)"

  arrh = "!git reset --hard @{u}"

  oh = "!git commit --amend --no-edit"

  ## Working with files ##

  # Unstage any files that have been added to the staging area
  unstage = reset HEAD

  # Show changes that have been staged
  diffc = diff --cached

  # Mark a file as "assume unchanged", which means that Git will treat it
  # as though there are no changes to it even if there are. Useful for
  # temporary changes to tracked files
  assume = update-index --assume-unchanged

  # Reverse the above
  unassume = update-index --no-assume-unchanged

  # Show the files that are currently assume-unchanged
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"

  # Checkout our version of a file and add it
  ours = "!f() { git checkout --ours $@ && git add $@; }; f"

  # Checkout their version of a file and add it
  theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

  # Delete any branches that have been merged into current branch
  delete-merged-branches = "!git co $(git branch-name) && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # any uncommited changes including untracked files are gone
  fullreset = "!git clean -df && git reset HEAD --hard"

  # list all fils changes on a commit
  listchanges = diff-tree --no-commit-id --name-only -r

  g = grep --break --heading --line-number

  revive = "!git checkout `git rev-list -n 1 HEAD -- $@`^ -- $@"
[init]
	defaultBranch = main
